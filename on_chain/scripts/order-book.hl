spending simple_dex

enum Datum {
    Order {
        owner: PubKeyHash
        from: AssetClass
        to: AssetClass
        minAmount: Int
    }
    SwapTag {
        txOutputId: TxOutputId
    }
}

enum Redeemer {
    Swap
    Cancel
}

func main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    datum.switch {
        orderDatum: Order => {
            redeemer.switch {
                Swap => {
                    expected_tag: Datum::SwapTag = Datum::SwapTag{ ctx.get_current_input().output_id };
                    expected_value: Value = Value::new(orderDatum.to, orderDatum.minAmount);
                    actual_value: Value = ctx.tx.value_sent_to_datum(orderDatum.owner, expected_tag, true);
                    actual_value >= expected_value    
                },
                Cancel => {
                    ctx.tx.is_signed_by(orderDatum.owner) 
                }
            }
        },
        else => false
    }
}
    
const adaToWmtDatum = Datum::Order{
    owner: PubKeyHash::new(#1394514f26bc9bf88f3733eaf72a5e298d209a21afe8748c2b1298b6),
    from: AssetClass::ADA,
    to: AssetClass::new(MintingPolicyHash::new(#065270479316f1d92e00f7f9f095ebeaac9d009c878dc35ce36d3404), #574d5474),
    minAmount: 5000
}

const wmtToAdaDatum = Datum::Order{
    owner: PubKeyHash::new(#1394514f26bc9bf88f3733eaf72a5e298d209a21afe8748c2b1298b6),
    from: AssetClass::new(MintingPolicyHash::new(#065270479316f1d92e00f7f9f095ebeaac9d009c878dc35ce36d3404), #574d5474),
    to: AssetClass::ADA,
    minAmount: 100000000
}

const txOutputRef = Datum::SwapTag{TxOutputId::new(TxId::new(#1a794a7c8fee4c426d0588ccdc96cba5b2a3663ede39d5862d0a1212cf66d977), 0)}

const swapRedeemer = Redeemer::Swap

const cancelRedeemer = Redeemer::Cancel